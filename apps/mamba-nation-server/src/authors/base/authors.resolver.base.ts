/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Authors } from "./Authors";
import { AuthorsCountArgs } from "./AuthorsCountArgs";
import { AuthorsFindManyArgs } from "./AuthorsFindManyArgs";
import { AuthorsFindUniqueArgs } from "./AuthorsFindUniqueArgs";
import { CreateAuthorsArgs } from "./CreateAuthorsArgs";
import { UpdateAuthorsArgs } from "./UpdateAuthorsArgs";
import { DeleteAuthorsArgs } from "./DeleteAuthorsArgs";
import { ArticlesFindManyArgs } from "../../articles/base/ArticlesFindManyArgs";
import { Articles } from "../../articles/base/Articles";
import { AuthorsService } from "../authors.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Authors)
export class AuthorsResolverBase {
  constructor(
    protected readonly service: AuthorsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "read",
    possession: "any",
  })
  async _authorsItemsMeta(
    @graphql.Args() args: AuthorsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Authors])
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "read",
    possession: "any",
  })
  async authorsItems(
    @graphql.Args() args: AuthorsFindManyArgs
  ): Promise<Authors[]> {
    return this.service.authorsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Authors, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "read",
    possession: "own",
  })
  async authors(
    @graphql.Args() args: AuthorsFindUniqueArgs
  ): Promise<Authors | null> {
    const result = await this.service.authors(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Authors)
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "create",
    possession: "any",
  })
  async createAuthors(
    @graphql.Args() args: CreateAuthorsArgs
  ): Promise<Authors> {
    return await this.service.createAuthors({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Authors)
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "update",
    possession: "any",
  })
  async updateAuthors(
    @graphql.Args() args: UpdateAuthorsArgs
  ): Promise<Authors | null> {
    try {
      return await this.service.updateAuthors({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Authors)
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "delete",
    possession: "any",
  })
  async deleteAuthors(
    @graphql.Args() args: DeleteAuthorsArgs
  ): Promise<Authors | null> {
    try {
      return await this.service.deleteAuthors(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Articles], { name: "articlesItems" })
  @nestAccessControl.UseRoles({
    resource: "Articles",
    action: "read",
    possession: "any",
  })
  async findArticlesItems(
    @graphql.Parent() parent: Authors,
    @graphql.Args() args: ArticlesFindManyArgs
  ): Promise<Articles[]> {
    const results = await this.service.findArticlesItems(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
