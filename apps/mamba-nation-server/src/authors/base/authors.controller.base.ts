/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AuthorsService } from "../authors.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AuthorsCreateInput } from "./AuthorsCreateInput";
import { Authors } from "./Authors";
import { AuthorsFindManyArgs } from "./AuthorsFindManyArgs";
import { AuthorsWhereUniqueInput } from "./AuthorsWhereUniqueInput";
import { AuthorsUpdateInput } from "./AuthorsUpdateInput";
import { ArticlesFindManyArgs } from "../../articles/base/ArticlesFindManyArgs";
import { Articles } from "../../articles/base/Articles";
import { ArticlesWhereUniqueInput } from "../../articles/base/ArticlesWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AuthorsControllerBase {
  constructor(
    protected readonly service: AuthorsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Authors })
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAuthors(
    @common.Body() data: AuthorsCreateInput
  ): Promise<Authors> {
    return await this.service.createAuthors({
      data: data,
      select: {
        bio: true,
        createdAt: true,
        id: true,
        name: true,
        profilePicture: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Authors] })
  @ApiNestedQuery(AuthorsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async authorsItems(@common.Req() request: Request): Promise<Authors[]> {
    const args = plainToClass(AuthorsFindManyArgs, request.query);
    return this.service.authorsItems({
      ...args,
      select: {
        bio: true,
        createdAt: true,
        id: true,
        name: true,
        profilePicture: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Authors })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async authors(
    @common.Param() params: AuthorsWhereUniqueInput
  ): Promise<Authors | null> {
    const result = await this.service.authors({
      where: params,
      select: {
        bio: true,
        createdAt: true,
        id: true,
        name: true,
        profilePicture: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Authors })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAuthors(
    @common.Param() params: AuthorsWhereUniqueInput,
    @common.Body() data: AuthorsUpdateInput
  ): Promise<Authors | null> {
    try {
      return await this.service.updateAuthors({
        where: params,
        data: data,
        select: {
          bio: true,
          createdAt: true,
          id: true,
          name: true,
          profilePicture: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Authors })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAuthors(
    @common.Param() params: AuthorsWhereUniqueInput
  ): Promise<Authors | null> {
    try {
      return await this.service.deleteAuthors({
        where: params,
        select: {
          bio: true,
          createdAt: true,
          id: true,
          name: true,
          profilePicture: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/articlesItems")
  @ApiNestedQuery(ArticlesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Articles",
    action: "read",
    possession: "any",
  })
  async findArticlesItems(
    @common.Req() request: Request,
    @common.Param() params: AuthorsWhereUniqueInput
  ): Promise<Articles[]> {
    const query = plainToClass(ArticlesFindManyArgs, request.query);
    const results = await this.service.findArticlesItems(params.id, {
      ...query,
      select: {
        author: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        publicationDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/articlesItems")
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "update",
    possession: "any",
  })
  async connectArticlesItems(
    @common.Param() params: AuthorsWhereUniqueInput,
    @common.Body() body: ArticlesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      articlesItems: {
        connect: body,
      },
    };
    await this.service.updateAuthors({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/articlesItems")
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "update",
    possession: "any",
  })
  async updateArticlesItems(
    @common.Param() params: AuthorsWhereUniqueInput,
    @common.Body() body: ArticlesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      articlesItems: {
        set: body,
      },
    };
    await this.service.updateAuthors({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/articlesItems")
  @nestAccessControl.UseRoles({
    resource: "Authors",
    action: "update",
    possession: "any",
  })
  async disconnectArticlesItems(
    @common.Param() params: AuthorsWhereUniqueInput,
    @common.Body() body: ArticlesWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      articlesItems: {
        disconnect: body,
      },
    };
    await this.service.updateAuthors({
      where: params,
      data,
      select: { id: true },
    });
  }
}
