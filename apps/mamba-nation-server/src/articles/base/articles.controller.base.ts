/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ArticlesService } from "../articles.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ArticlesCreateInput } from "./ArticlesCreateInput";
import { Articles } from "./Articles";
import { ArticlesFindManyArgs } from "./ArticlesFindManyArgs";
import { ArticlesWhereUniqueInput } from "./ArticlesWhereUniqueInput";
import { ArticlesUpdateInput } from "./ArticlesUpdateInput";
import { CommentsFindManyArgs } from "../../comments/base/CommentsFindManyArgs";
import { Comments } from "../../comments/base/Comments";
import { CommentsWhereUniqueInput } from "../../comments/base/CommentsWhereUniqueInput";
import { CreateArticleInput } from "../CreateArticleInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ArticlesControllerBase {
  constructor(
    protected readonly service: ArticlesService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Articles })
  @nestAccessControl.UseRoles({
    resource: "Articles",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createArticles(
    @common.Body() data: ArticlesCreateInput
  ): Promise<Articles> {
    return await this.service.createArticles({
      data: {
        ...data,

        author: data.author
          ? {
              connect: data.author,
            }
          : undefined,
      },
      select: {
        author: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        publicationDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Articles] })
  @ApiNestedQuery(ArticlesFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Articles",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async articlesItems(@common.Req() request: Request): Promise<Articles[]> {
    const args = plainToClass(ArticlesFindManyArgs, request.query);
    return this.service.articlesItems({
      ...args,
      select: {
        author: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        publicationDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Articles })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Articles",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async articles(
    @common.Param() params: ArticlesWhereUniqueInput
  ): Promise<Articles | null> {
    const result = await this.service.articles({
      where: params,
      select: {
        author: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        publicationDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Articles })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Articles",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateArticles(
    @common.Param() params: ArticlesWhereUniqueInput,
    @common.Body() data: ArticlesUpdateInput
  ): Promise<Articles | null> {
    try {
      return await this.service.updateArticles({
        where: params,
        data: {
          ...data,

          author: data.author
            ? {
                connect: data.author,
              }
            : undefined,
        },
        select: {
          author: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          publicationDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Articles })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Articles",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteArticles(
    @common.Param() params: ArticlesWhereUniqueInput
  ): Promise<Articles | null> {
    try {
      return await this.service.deleteArticles({
        where: params,
        select: {
          author: {
            select: {
              id: true,
            },
          },

          content: true,
          createdAt: true,
          id: true,
          publicationDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/commentsItems")
  @ApiNestedQuery(CommentsFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Comments",
    action: "read",
    possession: "any",
  })
  async findCommentsItems(
    @common.Req() request: Request,
    @common.Param() params: ArticlesWhereUniqueInput
  ): Promise<Comments[]> {
    const query = plainToClass(CommentsFindManyArgs, request.query);
    const results = await this.service.findCommentsItems(params.id, {
      ...query,
      select: {
        article: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        publicationDate: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/commentsItems")
  @nestAccessControl.UseRoles({
    resource: "Articles",
    action: "update",
    possession: "any",
  })
  async connectCommentsItems(
    @common.Param() params: ArticlesWhereUniqueInput,
    @common.Body() body: CommentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commentsItems: {
        connect: body,
      },
    };
    await this.service.updateArticles({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/commentsItems")
  @nestAccessControl.UseRoles({
    resource: "Articles",
    action: "update",
    possession: "any",
  })
  async updateCommentsItems(
    @common.Param() params: ArticlesWhereUniqueInput,
    @common.Body() body: CommentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commentsItems: {
        set: body,
      },
    };
    await this.service.updateArticles({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/commentsItems")
  @nestAccessControl.UseRoles({
    resource: "Articles",
    action: "update",
    possession: "any",
  })
  async disconnectCommentsItems(
    @common.Param() params: ArticlesWhereUniqueInput,
    @common.Body() body: CommentsWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      commentsItems: {
        disconnect: body,
      },
    };
    await this.service.updateArticles({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Post("/create-article")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async CreateArticle(
    @common.Body()
    body: CreateArticleInput
  ): Promise<string> {
    return this.service.CreateArticle(body);
  }
}
